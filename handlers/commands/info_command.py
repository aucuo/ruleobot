from datetime import datetime, timedelta, timezone
from telebot.types import Message
from api.controllers.group_controller import GroupController
from api.models import Member
from bot import bot
import logging

logger = logging.getLogger(__name__)

def info_command(message: Message):
    chat_id = str(message.chat.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    group_controller = GroupController(chat_id)
    group_result = group_controller.get()

    if not group_result["success"]:
        error_message = f"–û—à–∏–±–∫–∞: {group_result['error']}"
        logger.error(error_message)
        bot.send_message(chat_id, error_message)
        return

    group = group_result["group"]

    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) == 1:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
        print_group_info(chat_id, group, group_controller)
    else:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        target_username = command_parts[1].strip('@')
        print_user_info(chat_id, target_username, group_controller)


def calculate_message_counts(members, member_controller):
    today = datetime.now(timezone.utc).date()
    yesterday = today - timedelta(days=1)
    today_count = {}
    yesterday_count = {}

    for member in members:
        messages_result = member_controller.messages().get()
        if not messages_result["success"]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.username}: {messages_result['error']}")
            continue

        for message in messages_result["messages"]:
            message_date = datetime.fromisoformat(message.date).date()
            if message_date == today:
                today_count[member.username] = today_count.get(member.username, 0) + 1
            elif message_date == yesterday:
                yesterday_count[member.username] = yesterday_count.get(member.username, 0) + 1

    return today_count, yesterday_count


def format_top_users(counts, title):
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)[:5]
    return (
        f"üìÖ {title}:\n" +
        "\n".join([f"{i + 1}. @{username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for i, (username, count) in enumerate(sorted_counts)])
        if sorted_counts else f"{title}: –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    )


def print_group_info(chat_id, group, group_controller):
    member_controller = group_controller.members(None)
    members_result = member_controller.get_all()

    if not members_result["success"]:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_result['error']}")
        bot.send_message(chat_id, f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ.")
        return

    members = members_result["members"]
    member_count = len(members)

    top_users = sorted(members, key=lambda member: getattr(member, "message_count", 0), reverse=True)[:5]
    top_users_text = "\n".join(
        [f"{i + 1}. @{member.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ‚Äî {member.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
         for i, member in enumerate(top_users)]
    ) if top_users else "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    today_count, yesterday_count = calculate_message_counts(members, member_controller)

    info_text = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n"
        f"ID: {group.group_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {group.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{group.owner_username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n\n"
        f"üî• –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏):\n{top_users_text}\n\n"
        f"{format_top_users(today_count, '–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')}\n\n"
        f"{format_top_users(yesterday_count, '–¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –≤—á–µ—Ä–∞')}"
    )
    bot.send_message(chat_id, info_text)


def print_user_info(chat_id, target_username, group_controller):
    member_controller = group_controller.members(None)
    member_result = member_controller.get_by_username(target_username)

    if not member_result["success"]:
        error_message = f"‚ùå {member_result['error']}"
        logger.error(error_message)
        bot.send_message(chat_id, error_message)
        return

    user_id = member_result["user_id"]
    user_data = member_result["user_data"]
    member = Member.from_dict({"user_id": user_id, **user_data})

    today = datetime.now(timezone.utc).date()
    yesterday = today - timedelta(days=1)
    today_count = 0
    yesterday_count = 0

    messages_result = group_controller.members(member.user_id).messages().get()
    if messages_result["success"]:
        for message in messages_result["messages"]:
            message_date = datetime.fromisoformat(message.date).date()
            if message_date == today:
                today_count += 1
            elif message_date == yesterday:
                yesterday_count += 1

    warns_result = group_controller.members(member.user_id).warns().get()
    warns_text = "\n".join(
        [f"- –ü—Ä–∏—á–∏–Ω–∞: {warn.reason}, –î–∞—Ç–∞: {warn.date}" for warn in warns_result.get("warns", [])]
    ) if warns_result["success"] else None

    mutes_result = group_controller.members(member.user_id).mutes().get()
    mutes_text = "\n".join(
        [f"- –ü—Ä–∏—á–∏–Ω–∞: {mute.reason}, –î–æ: {mute.mute_until}" for mute in mutes_result.get("mutes", [])]
    ) if mutes_result["success"] else None

    info_text = (
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ @{target_username}:\n"
        f"ID: {member.user_id}\n"
        f"–ò–º—è: {member.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} {member.last_name or ''}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ: {member.message_count}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞: {yesterday_count}"
    )
    if warns_text:
        info_text += f"\n\n‚ö†Ô∏è –í–∞—Ä–Ω—ã:\n{warns_text}"
    if mutes_text:
        info_text += f"\n\nüîá –ú—É—Ç—ã:\n{mutes_text}"

    bot.send_message(chat_id, info_text)
