import os
import re
import uuid
from datetime import datetime, timedelta, timezone
from bot import bot
from api.controllers.group_controller import GroupController
from api.models import Warn, Mute
import logging
import google.generativeai as genai

from utils import escape_markdown

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
try:
    with open('spam_list.txt', 'r', encoding='utf-8') as file:
        SPAM_TRIGGERS = file.read().splitlines()
except FileNotFoundError:
    SPAM_TRIGGERS = []

try:
    with open('profanity_list.txt', 'r', encoding='utf-8') as file:
        PROFANITY_LIST = file.read().splitlines()
except FileNotFoundError:
    PROFANITY_LIST = []

GROUP_MESSAGE_TRACKER = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–π—Ä–æ–Ω–∫–∏
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
CHAT_CONTEXTS = {}

PROMPT_FILE_PATH = "small_talk_prompt.txt"
try:
    with open(PROMPT_FILE_PATH, "r", encoding="utf-8") as file:
        base_system_prompt = file.read()
except FileNotFoundError:
    base_system_prompt = "–í—ã - Ruleobot, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ small_talk —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
def handle_small_talk_with_context(chat_id, user_name, message_text):
    try:
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
        if chat_id not in CHAT_CONTEXTS:
            CHAT_CONTEXTS[chat_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        CHAT_CONTEXTS[chat_id].append(f"{user_name}: {message_text}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(CHAT_CONTEXTS[chat_id]) > 10:  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            CHAT_CONTEXTS[chat_id] = CHAT_CONTEXTS[chat_id][-10:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        system_prompt = (
            f"{base_system_prompt}. –í—ã - Ruleobot, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
            "–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–µ—Å–µ–ª–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω—ã–π —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è. "
            "–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
            f"–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ –æ–±—â–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}"
        )
        combined_context = system_prompt + "\n".join(CHAT_CONTEXTS[chat_id])

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏
        response = model.generate_content(
            contents={"text": combined_context},
            generation_config={"max_output_tokens": 150}
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        CHAT_CONTEXTS[chat_id].append(f"Ruleobot: {response.text.strip()}")

        return response.text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ small_talk –Ω–µ–π—Ä–æ–Ω–∫–æ–π: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
def normalize_text(text):
    return re.sub(r'[^\w\s]', '', text.lower())

def contains_profanity(text):
    normalized_text = normalize_text(text)
    return any(word in normalized_text.split() for word in PROFANITY_LIST)

def contains_caps(text):
    return text.isupper() and any(c.isalpha() for c in text) and len(text) > 4

def contains_spam(text):
    normalized_text = normalize_text(text)
    return any(trigger in normalized_text.split() for trigger in SPAM_TRIGGERS)

def contains_links(text):
    return bool(re.search(r"(https?://[^\s]+)|(www\.[^\s]+)", text))

def is_message_limit_exceeded(group_id, user_id, max_messages=6, interval_seconds=60):
    now = datetime.now()
    if group_id not in GROUP_MESSAGE_TRACKER:
        GROUP_MESSAGE_TRACKER[group_id] = {}
    if user_id not in GROUP_MESSAGE_TRACKER[group_id]:
        GROUP_MESSAGE_TRACKER[group_id][user_id] = []
    GROUP_MESSAGE_TRACKER[group_id][user_id].append(now)
    GROUP_MESSAGE_TRACKER[group_id][user_id] = [
        timestamp for timestamp in GROUP_MESSAGE_TRACKER[group_id][user_id]
        if now - timestamp <= timedelta(seconds=interval_seconds)
    ]
    return len(GROUP_MESSAGE_TRACKER[group_id][user_id]) > max_messages

def validate_message(text, settings, group_id, user_id):
    violations = []
    if settings.spam_filter and contains_spam(text):
        violations.append("–°–ø–∞–º")
    if settings.caps_filter and contains_caps(text):
        violations.append("–ö–∞–ø—Å")
    if settings.links_filter and contains_links(text):
        violations.append("–°—Å—ã–ª–∫–∏")
    if settings.profanity_filter and contains_profanity(text):
        violations.append("–ú–∞—Ç—ã")
    if is_message_limit_exceeded(group_id, user_id):
        violations.append("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É")
    return violations

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é
def analyze_message_with_ai(user_name, message_text):
    try:
        model = genai.GenerativeModel(model_name="gemini-1.5-flash")
        system_prompt = (
            "–í—ã - Ruleobot, –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. "
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–æ—Ö–∏–º (—Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –º–∞—Ç—ã, –∫–∞–ø—Å). "
            "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–æ—Ö–æ–µ, –æ–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –ò–ò) –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ'."
        )
        response = model.generate_content(
            contents={"text": f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"},
            generation_config={"max_output_tokens": 50}
        )
        return response.text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–∫–æ–π: {e}")
        return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ–Ω–∫–æ–π"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def message_validator(message):
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    text = message.text or ""

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
    group_controller = GroupController(chat_id)
    group_result = group_controller.get()

    if not group_result["success"]:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã {chat_id}: {group_result['error']}")
        return

    group = group_result["group"]
    settings = group.settings

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    violations = validate_message(text, settings, chat_id, user_id)

    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
    if not violations and settings.ai_filter:
        user_name = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name or ''}"
        ai_result = analyze_message_with_ai(user_name, text)
        if "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ" not in ai_result:
            violations.append(ai_result)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ small_talk —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        elif settings.small_talk:
                response = handle_small_talk_with_context(chat_id, user_name, text)
                bot.reply_to(message, f"ü§ñ {escape_markdown(response)}", parse_mode="MarkdownV2")
                return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    if violations:
        logger.warning(f"–ù–∞—Ä—É—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {', '.join(violations)}")
        member_controller = group_controller.members(user_id)
        warn_controller = member_controller.warns()
        mute_controller = member_controller.mutes()
        warns_result = warn_controller.get()
        current_warns = warns_result["warns"] if warns_result["success"] else []
        warn_count = len(current_warns)

        # –í—ã–¥–∞—ë–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for violation in violations:
            warn_id = str(uuid.uuid4())
            warn = Warn(
                warn_id=warn_id,
                reason=violation,
                date=datetime.now().isoformat(),
                issued_by="ruleobot"
            )
            warn_result = warn_controller.post(warn)
            if warn_result["success"]:
                warn_count += 1
                bot.reply_to(
                    message,
                    f"‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ: {violation}. –í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warn_count} –∏–∑ 5."
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {warn_result['error']}")

        # –ï—Å–ª–∏ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –≤—ã–¥–∞—ë–º –º—É—Ç
        if warn_count >= 5:
            mute_id = str(uuid.uuid4())
            mute_until = datetime.now(timezone.utc) + timedelta(days=1)
            mute = Mute(
                mute_id=mute_id,
                reason="–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                mute_until=mute_until.isoformat(),
                issued_by="ruleobot"
            )
            mute_result = mute_controller.post(mute)
            if mute_result["success"]:
                warn_controller.clear()
                bot.reply_to(
                    message,
                    "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –Ω–∞ 24 —á–∞—Å–∞."
                )
        bot.delete_message(chat_id, message.message_id)
